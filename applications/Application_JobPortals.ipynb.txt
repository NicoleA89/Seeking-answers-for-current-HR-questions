{"cells":[{"metadata":{},"cell_type":"markdown","source":"## Business Question\n### On which job portals can (German) companies find qualified IT professionals?\nGiven the current shortage of skilled workers and demographic change, it is increasingly difficult for companies to find qualified talents - especially in the IT segment. Where can companies find qualified IT professionals? With this notebook we will tackle this question and find out which are the TOP job portals for the participants worldwide and in Germany."},{"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"cell_type":"code","source":"# import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# read the necessary dataset\ndf = pd.read_csv(\"../input/survey_results_public.csv\")\n\n# check the shape of the dataset\ndf.shape","execution_count":8,"outputs":[{"output_type":"execute_result","execution_count":8,"data":{"text/plain":"(51392, 154)"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"## Data Understanding\nIn order to get a better understanding of the data, we are am taking a look at some of the characteristics of the dataset. The fields 'JobProfile' and 'Country' are relevant to answer the question above. So let's take a close look at those cokumns in particular."},{"metadata":{"trusted":true},"cell_type":"code","source":"# Get an overview of the relevant column 'JobProfile'\n\n# show missing values for 'JobProfile'\nprint(np.sum(df['JobProfile'].isnull() == 1))\n\n# show proportion of missing values for 'JobProfile'\nprint(df['JobProfile'].isnull().mean())","execution_count":9,"outputs":[{"output_type":"stream","text":"26673\n0.5190107409713575\n","name":"stdout"}]},{"metadata":{"_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","trusted":true},"cell_type":"code","source":"# list all possible answers in a new dataset\n\n# note that for this purpose (finding top job portals), dropping NaN values for 'JobProfile' is not relevant.\n# df['JobProfile'].value_counts(dropna=False)\n\ndf_jobprofile = df['JobProfile'].value_counts().reset_index()\ndf_jobprofile.rename(columns={'index': 'JobPortal', 'JobProfile': 'count'}, inplace=True)\ndf_jobprofile.head()","execution_count":10,"outputs":[{"output_type":"execute_result","execution_count":10,"data":{"text/plain":"          JobPortal  count\n0          LinkedIn  14139\n1   LinkedIn; Other   1580\n2             Other   1181\n3    LinkedIn; Xing    626\n4  Indeed; LinkedIn    608","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>JobPortal</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LinkedIn</td>\n      <td>14139</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LinkedIn; Other</td>\n      <td>1580</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Other</td>\n      <td>1181</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LinkedIn; Xing</td>\n      <td>626</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Indeed; LinkedIn</td>\n      <td>608</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"## Data preparation\nIn this case we do not want to look at the rows with missing values. As we only want to take a look at the job portals with the most entries, we can ignore the rows with missing values. But we do want to take apart multiple answers into the single pieces in order to count each relevant entry."},{"metadata":{"trusted":true},"cell_type":"code","source":"# define function total_count to take apart multiple answers\ndef total_count(df, col1, col2, look_for):\n    '''\n    input:\n    df - the pandas dataframe you want to search\n    col1 - the column name you want to look through\n    col2 - the column you want to count values from\n    look_for - a list of strings you want to search for in each row of df[col]\n    \n    output:\n    new_df - a dataframe of each look_for with the count of how often it shows up\n    '''\n    from collections import defaultdict\n    new_df = defaultdict(int)\n    for val in look_for:\n        for idx in range(df.shape[0]):\n            if val in df[col1][idx]:\n                new_df[val] += int(df[col2][idx])\n    new_df = pd.DataFrame(pd.Series(new_df)).reset_index()\n    new_df.columns = [col1, col2]\n    new_df.sort_values('count', ascending=False, inplace=True)\n    return new_df\n\n# define all relevant answers for 'JobProfile'\npossible_answers = [\"LinkedIn\", \"Indeed\", \"Monster\", \"Hired.com\", \"Dice\", \"Talent.io\",\n                    \"StepStone\", \"Xing\", \"Reed.co.uk\", \"Xing\", \"CW Jobs\", \"Total Jobs\", \n                    \"Glassdoor\", \"JobSite.co.ik\", \"Remix jobs\", \"Naukri\", \"Pracuj\"]\n        \n# execute function 'total count' for the dataset\ndf_jobprofile = total_count(df_jobprofile, 'JobPortal', 'count', possible_answers)\n\n# add a column to identify the percentage of each answer\ndf_jobprofile['percent'] = df_jobprofile['count']*100/np.sum(df_jobprofile['count'])\ndf_jobprofile.head()","execution_count":11,"outputs":[{"output_type":"execute_result","execution_count":11,"data":{"text/plain":"   JobPortal  count    percent\n0   LinkedIn  21608  63.030162\n7       Xing   2896   8.447582\n2    Monster   2443   7.126189\n1     Indeed   2323   6.776151\n10    Naukri   1473   4.296715","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>JobPortal</th>\n      <th>count</th>\n      <th>percent</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LinkedIn</td>\n      <td>21608</td>\n      <td>63.030162</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Xing</td>\n      <td>2896</td>\n      <td>8.447582</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Monster</td>\n      <td>2443</td>\n      <td>7.126189</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Indeed</td>\n      <td>2323</td>\n      <td>6.776151</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Naukri</td>\n      <td>1473</td>\n      <td>4.296715</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"# visualize the results (top 5 job portals) in a bar chart\ndf_jobprofile = df_jobprofile[:5].copy()\ndf_jobprofile.sort_values(by='count', ascending=False).plot('JobPortal', 'count', kind=\"bar\", figsize=(15,5), legend=False, color=\"blue\")\nplt.title('TOP 5 Job Portals (all countries)', fontsize=15);","execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1080x360 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"# now create a new dataset for participants with current residence in Germany and show the shape\ndf_germany = df[df['Country'] == 'Germany']\ndf_germany['Country'].value_counts()","execution_count":13,"outputs":[{"output_type":"execute_result","execution_count":13,"data":{"text/plain":"Germany    4143\nName: Country, dtype: int64"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"# use the same approach as above: list all the relevant answers for 'JobPortal'\ndf_job_germany = df_germany['JobProfile'].value_counts().reset_index()\ndf_job_germany.rename(columns={'index': 'JobPortal', 'JobProfile': 'count'}, inplace=True)\ndf_job_germany.head()\n","execution_count":14,"outputs":[{"output_type":"execute_result","execution_count":14,"data":{"text/plain":"               JobPortal  count\n0         LinkedIn; Xing    497\n1                   Xing    486\n2               LinkedIn    317\n3                  Other     92\n4  LinkedIn; Other; Xing     62","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>JobPortal</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LinkedIn; Xing</td>\n      <td>497</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Xing</td>\n      <td>486</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LinkedIn</td>\n      <td>317</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Other</td>\n      <td>92</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LinkedIn; Other; Xing</td>\n      <td>62</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"# use the same approach as above: take apart multiple answers by using 'total_count'\n\n# execute function 'total_count' for the dataset\ndf_job_germany = total_count(df_job_germany, 'JobPortal', 'count', possible_answers)\n\n# add a column to identify the percentage of each answer\ndf_job_germany['percent'] = df_job_germany['count']*100/np.sum(df_job_germany['count'])\ndf_job_germany.head()","execution_count":15,"outputs":[{"output_type":"execute_result","execution_count":15,"data":{"text/plain":"   JobPortal  count    percent\n7       Xing   2458  63.977095\n0   LinkedIn   1069  27.824050\n2    Monster    120   3.123373\n6  StepStone    112   2.915148\n1     Indeed     40   1.041124","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>JobPortal</th>\n      <th>count</th>\n      <th>percent</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>7</th>\n      <td>Xing</td>\n      <td>2458</td>\n      <td>63.977095</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>LinkedIn</td>\n      <td>1069</td>\n      <td>27.824050</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Monster</td>\n      <td>120</td>\n      <td>3.123373</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>StepStone</td>\n      <td>112</td>\n      <td>2.915148</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Indeed</td>\n      <td>40</td>\n      <td>1.041124</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"# visualize the results (top 5 job portals) in a bar chart\ndf_job_germany = df_job_germany[:5].copy()\ndf_job_germany.sort_values(by='count', ascending=False).plot('JobPortal', 'count', kind=\"bar\", figsize=(15,5), legend=False, color=\"blue\");\nplt.title('TOP 5 Job Portals (Germany)', fontsize=15);","execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1080x360 with 1 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"metadata":{},"cell_type":"markdown","source":"## Evaluation\nLinkedIn is the most promising adress worldwide if you are looking for IT professionals. In Germany LinkedIn is still well represented, but the most popular job portal for IT professionals in Germany is Xing. The results are very satisfying and the TOP job portal (LinkedIn / Xing) each have a very solid rank with a share of ~ 60 % of all job portals from the survey."}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.6.4","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat":4,"nbformat_minor":1}